
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    #users: [User!]!  @paginate  #(type: "paginator" model: "App\\User")
    # //user(id:ID @eq):User  @guard(with: ["api"]) @find

    azmoons: [Azmoon!]! @guard(with: ["api"]) @paginate
    azmoon(id: ID @eq):Azmoon @guard(with: ["api"]) @find

    test1param(name:String="abdollah"): String
    getUser(id:ID!):User @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUser@resolveUserAttribute") 
    getUsers: [User]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUser")
    getGroup(id:ID!):Group @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Group\\GetGroup@resolveGroupAttribute") 
    getGroups: [Group]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Group\\GetGroups@resolveGroup")
    
    getTeacher(id:ID!):Teacher @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Teacher\\GetTeacher@resolveTeacherAttribute") 
    getTeachers: [Teacher]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Teacher\\GetTeachers@resolveTeacher")
    # getUsers: [User!]!  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUserAttribute") 
    #  GetUsers: [User!]!  @paginate(builder: "App\\Models\\User@resolveUser")
    #  GetUsers: [User!]! @paginate(defaultCount: 10 )
    # getUsers: [User!]!  @guard(with:["api"]) @paginate(defaultCount: 10) #(builder: "App\\Models\\User@resolveUser")
   
    getYear(id:ID!):Year @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Year\\GetYear@resolveYearAttribute") 
    getYears: [Year]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Year\\GetYears@resolveYear")
  


    getStudent(id:ID!):Student @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Student\\GetStudent@resolveStudentAttribute") 
    getStudents: [Student]  @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Queries\\Student\\GetStudents@resolveStudent") 

}
type Student{
        id:ID
        phone:String,
        first_name:String,
        last_name:String,
        level:Int,
        egucation_level:Int,
        parents_job_title:String,
        home_phone:String,
        father_phone:String,
        mother_phone:String,
        school:String,
        average:Float,
        major:String,
        introducing:String,
        student_phone:String,
        cities_id:Int,
        sources_id:Int,
        supporters_id:Int,
        archived:String
}
 
# type Student{
#   id:ID
#   first_name:String
#   last_name:String
#   last_year_grade:String
#   consultants_id:Int
#   parents_job_title:String
#   home_phone:String
#   father_phone:String
#   mother_phone:String
#   phone:String
#   level:Int
#   school:String
#   introducing:String
#   student_phone:String
#   sources_id:Int
#   supporters_id:Int
#   users_id:Int
#   marketers_id:Int
#   average:Float
#   viewed:Int
#   major:String
#   egucation_level:Int
#   provinces_id:Int
#   is_from_site:Int
#   description:String
#   supporter_seen:Int
#   saloon:String
#   supporter_start_date:DateTime
#   banned:Int
#   cities_id:Int
#   archived:Int
#   outside_consultants:String
#   own_purchases:Int
#   other_purchases:Int
#   today_purchases:Int

#   created_at: DateTime
#   updated_at: DateTime
#   is_deleted:Int
# }
type User {
    id:ID    
    # userId:ID
    first_name: String
    last_name: String
    #mobile: String!
    email: String
    #type: String!
    #is_teacher: Int!    
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    groups: [Group] @belongsTo
}

type Group{ 
  id:ID
  # groupId:ID
  user_id_creator:Int
  # key:String
  name:String
  type:String
  created_at: DateTime
  updated_at: DateTime
  deleted_at: DateTime
  users: [User] @belongsToMany
  pivot: GroupUserPivot

  menus: [Menu!] @belongsTo
}
type GroupUserPivot { 
    id:ID   
    # groupUserId: ID
    user_id_creator:Int
    user_id: Int
    group_id: Int
    key: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    user: [User!] @hasMany
    group: [Group!] @hasMany
}

type Menu {
    id:ID
    # menuId: Int
    slug: String
    name: String
    icon: String
    href: String
    #type: String!
    parent_id: Int    
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    groups: [Group!] @belongsToMany
    pivot: MenuPivot
}

type MenuPivot {
    id:ID
    # groupMenuId: Int
    user_id_creator:Int
    menu_id: Int
    group_id: Int  
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    menu: [Menu!] @hasMany
    group: [Group!] @hasMany
}


type Azmoon {
  id:Int
  user_id:Int
  course_id:Int
  course_session_id:Int
  isSMSsend:Int
  score:Float
  created_at:DateTime
  updated_at:DateTime
  deleted_at: DateTime
}
type Teacher {
  id:ID!
  user_id_creator:Int
  first_name:String
  last_name:String
  mobile:String
  address:String
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
}

type Year {
  id:ID!
  user_id_creator:Int
  name:String
  active:Boolean  
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
}

# "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
# scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# "Indicates what fields are available at the top level of a query operation."
# type Query {
#     "Find a single user by an identifying attribute."
#     user(
#       "Search by primary key."
#       id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#       "Search by email address."
#       email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     ): User @find

#     "List multiple users."
#     users(
#       "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#       name: String @where(operator: "like")
#     ): [User!]! @paginate(defaultCount: 10)
# }

# "Account of a person who utilizes this application."
# type User_tmp {
#     "Unique primary key."
#     id: ID!

#     "Non-unique name."
#     name: String!

#     "Unique email address."
#     email: String!

#     "When the email was verified."
#     email_verified_at: DateTime

#     "When the account was created."
#     created_at: DateTime!

#     "When the account was last updated."
#     updated_at: DateTime!
# }

# type User {
#   id: ID!
#   type: String!
#   mobile: String! 
#   email: String!
#   password: String!
#   first_name: String!
#   last_name: String!
#   is_teacher: Int!
#   created_at: String!
#   updated_at: String
# }
  # type Mutation {
  #   createUser(input: CreateUserInput! @spread): User! @create  

  #   updateUser(
  #     id:ID!
  #     type: String
  #     mobile: String    
  #     first_name: String
  #     last_name: String
  #     is_teacher: Int  
  #     ): User! @update

  #     deleteUser(id:ID!): User @delete
  # }

  
# input updateuserinput {
#   id:ID!
#   type: String!
#   mobile: String!  
#   email: String!
#   password: String!
#   first_name: String!
#   last_name: String!
#   is_teacher: Int!  
# }

# type query{
#   user(id:ID! @eq) :User  @find
#   users:[User!]! @paginate
# }

  
    input CreateAzmoonInput{
          user_id:Int!
          course_id:Int!
          course_session_id:Int!
          isSMSsend:Int!
          score:Float!
   }
   input CreateUserInput {
     # type: String!
     # mobile: String!  @rules(apply:["size:11","unique:users,mobile"])
     # email: String! @rules(apply: ["email","unique:users,email"])
      email: String! @rules(apply: ["size:11","unique:users,email"])
      password: String! @hash @rules(apply: ["min:6"])
      first_name: String!
      last_name: String!
      group_id:Int!
      # group_user:createGroupUserInput! @create
     # is_teacher: Int!  
    }
   input UpdateUserInput {
       id:ID!
     # type: String
     # mobile: String 
      email:String  
     # password: String!      
      first_name: String
      last_name: String
      group_id:Int 
      # ): User! @update
   }
    # input createGroupUserInput {
    #   user_id_creator:Int!
    #   user_id:Int!
    #   group_id:Int!
    #   # created_at:DateTime
    #   # updated_at:datetime
    # }

    input CreateTeacherInput{
      first_name: String!
      last_name: String!
      mobile: String! @rules(apply: ["size:11","unique:teachers,mobile"])
      address:String!
    }
    input UpdateTeacherInput{
      id:ID!
      first_name: String
      last_name: String
      mobile: String @rules(apply: ["size:11","unique:teachers,mobile"])
      address:String
    }

    input CreateYearInput{
      name: String!
      active: Boolean!      
    }
    input UpdateYearInput{
      id:ID!
      name: String
      active: Boolean   
    }
    
    input CreateStudentInput{
      # first_name: String!
      # last_name: String!
      # mobile: String! @rules(apply: ["size:11","unique:teachers,mobile"])
      # address:String!

       
        phone:String!,# @rules(apply: ["size:11","unique:students,phone"]),
        first_name:String!,
        last_name:String!,
        level:Int!,
        egucation_level:String!,
        parents_job_title:String,
        home_phone:String,
        father_phone:String,
        mother_phone:String,
        school:String,
        average:Float,
        major:String!,
        introducing:String,
        student_phone:String,
        cities_id:Int,
        sources_id:Int,
        supporters_id:Int,
        archived:Int
    }
     input UpdateStudentInput{
        id:Int!
        phone:String,# @rules(apply: ["size:11","unique:students,phone"]),
        first_name:String,
        last_name:String,
        level:Int,
        egucation_level:String,
        parents_job_title:String,
        home_phone:String,
        father_phone:String,
        mother_phone:String,
        school:String,
        average:Float,
        major:String!,
        introducing:String,
        student_phone:String,
        cities_id:Int,
        sources_id:Int,
        supporters_id:Int,
        archived:Int
    }

type Mutation {
    #test2:String!
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    #updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse @field(resolver: "App\\GraphQL\\Mutations\\User\\ResetPassword@resolve") 
  # region user
  #  createUser(input: CreateUserInput! @spread): User! @create  
    createUser(input: CreateUserInput! @spread): User!  @field(resolver: "App\\GraphQL\\Mutations\\User\\CreateUser@resolve")
    updateUser(input: UpdateUserInput! @spread): User! @field(resolver: "App\\GraphQL\\Mutations\\User\\UpdateUser@resolve")
    deleteUser(id:ID!): User @delete

  #end 

  # region teacher
    createTeacher(input: CreateTeacherInput! @spread): Teacher!  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\CreateTeacher@resolver")
    updateTeacher(input: UpdateTeacherInput! @spread): Teacher!  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\UpdateTeacher@resolver")
    deleteTeacher(id:ID!):Teacher @delete
  #end region

   # region yaer
    createYear(input: CreateYearInput! @spread): Year!  @field(resolver: "App\\GraphQL\\Mutations\\Year\\CreateYear@resolver")
    updateYear(input: UpdateYearInput! @spread): Year!  @field(resolver: "App\\GraphQL\\Mutations\\Year\\UpdateYear@resolver")
    deleteYear(id:ID!):Year @delete
  #end yaer
  # region Student
    createStudent(input: CreateStudentInput! @spread): Student!  @field(resolver: "App\\GraphQL\\Mutations\\Student\\CreateStudent@resolver")
    updateStudent(input: UpdateStudentInput! @spread): Student!  @field(resolver: "App\\GraphQL\\Mutations\\Student\\UpdateStudent@resolver")
    deleteStudent(id:ID!):Student  @field(resolver: "App\\GraphQL\\Mutations\\Student\\DeleteStudent@resolver")
  #end Student
  
  #region azmoon
    createAzmoon(input: CreateAzmoonInput! @spread): Azmoon! @create
    updateAzmoon(
          id:ID!
          user_id:Int
          course_id:Int
          course_session_id:Int
          isSMSsend:Int
          score:Float
    ): Azmoon! @update

    deleteAzmoon(id:ID!):Azmoon @delete

  #end region

}

