
scalar _Any
scalar _FieldSet

# a union of all types that use the @key directive
union _Entity = Course | User

type _Service {
  sdl: String
}

# extend type Query {
#   _entities(representations: [_Any!]!): [_Entity]! @field(resolver: "App\\GraphQL\\Queries\\_entities@__invoke") 
#   _service: _Service!  @field(resolver: "App\\GraphQL\\Queries\\_service@__invoke") 
# }

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

# this is an optional directive discussed below
directive @extends on OBJECT | INTERFACE

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")


  type Query @extends  { 
     _entities(representations: [_Any!]!): [_Entity]! 
     _service: _Service!  
    #users: [User!]!  @paginate  #(type: "paginator" model: "App\\User")
    # //user(id:ID @eq):User  @guard(with: ["api"]) @find

    # azmoons: [Azmoon!]! @guard(with: ["api"]) @paginate
    # azmoon(id: ID @eq):Azmoon @guard(with: ["api"]) @find

    # test1param(name:String="abdollah"): String
    getUser(id:ID!):User @can(ability: "view")  @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUser@resolveUserAttribute") 
    getUsers(
      first_name: String @like(template : "%{}%") 
      last_name: String @like(template : "%{}%")
      email: String @like(template : "%{}%")      
      group_id: Int  
      # group_id: Group  @belongsToMany(relation: "groups" ) 
      orderBy: [OrderByClause!] @orderBy
       ): [User]  @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUser") 
    getGroup(id:ID!):Group @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Group\\GetGroup@resolveGroupAttribute") 
    getGroups(
      name:String @like (template : "%{}%")
      persian_name:String @like (template : "%{}%")
      type:String @like(template : "%{}%")
      orderBy:[OrderByClause!] @orderBy
    
    ): [Group] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\Group\\GetGroups@resolveGroup")
    
    getTeacher(id:ID!):Teacher @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\Teacher\\GetTeacher@resolveTeacherAttribute") 
    getTeachers: [Teacher]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Teacher\\GetTeachers@resolveTeacher")
    # getUsers: [User!]!  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUserAttribute") 
    #  GetUsers: [User!]!  @paginate(builder: "App\\Models\\User@resolveUser")
    #  GetUsers: [User!]! @paginate(defaultCount: 10 )
    # getUsers: [User!]!  @guard(with:["api"]) @paginate(defaultCount: 10) #(builder: "App\\Models\\User@resolveUser")
   
    getYear(id:ID!):Year @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\Year\\GetYear@resolveYearAttribute") 
    getYears(
      name: String @like (template : "%{}%")
      active: Boolean @eq
      orderBy:[OrderByClause!] @orderBy

    ): [Year] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\Year\\GetYears@resolveYear")

    getCourse(id:ID!):Course @guard(with:["api"]) @can(ability: "view")  @field(resolver: "App\\GraphQL\\Queries\\Course\\GetCourse@resolveCourseAttribute") 
    getCourses(
      name:String @like(template: "%{}%")
      lesson: String @like(template: "%{}%")      
      orderBy:[OrderByClause!] @orderBy
    ): [Course] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\Course\\GetCourses@resolveCourse") 


    getCourseSession(id:ID!):CourseSession  @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\CourseSession\\GetCourseSession@resolveCourseSessionAttribute") 
    getCourseSessions(
       name:String @like(template: "%{}%")
       course_id:Int @eq
      #  start_date:String @where(operator: ">=")
       date_after: Date @where(operator: ">=", key: "start_date")# @where(operator: ">=", clause: "orWhere", key: "created_at")
       date_befor: Date @where(operator: "<=", key: "start_date")# @where(operator: "<=", clause: "orWhere", key: "created_at")
       
       start_time_after: String @where(operator: ">=", key: "start_time")
       start_time_befor: Date @where(operator: "<=", key: "start_time")

       end_time_after: String @where(operator: ">=", key: "end_time")
       end_time_befor: String @where(operator: "<=", key: "end_time")

       orderBy:[OrderByClause!] @orderBy
    ): [CourseSession]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\CourseSession\\GetCourseSessions@resolveCourseSession") 
    

    getCourseStudent(id:ID!):CourseStudent @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\CourseStudent\\GetCourseStudent@resolveCourseStudentAttribute") 
    getCourseStudents(
       student_id:Int @eq
       course_id:Int @eq
      #  course_session_id:Int @eq
       user_id_creator:Int @eq
       user_id_manager:Int @eq
       user_id_financial:Int @eq
       user_id_student_status:Int @eq
       manager_status:String @like(template: "%{}%")      
       manager_status_not_equal:String @neq(key: "manager_status")      
       financial_status:String @like(template: "%{}%")      
       financial_status_not_equal:String @neq(key: "financial_status")      
       student_status:String @like(template: "%{}%")       
       student_status_not_equal:String @neq(key: "student_status")       
       financial_status_not_equal:String @neq(key: "financial_status")
       manager_financial_not_equal:String
       
       orderBy:[OrderByClause!] @orderBy
    ): [CourseStudent] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\CourseStudent\\GetCourseStudents@resolveCourseStudent") 
     
     getCourseStudentsWithAbsencePresence(
      #  student_id:Int @eq
       course_id:Int! 
       course_session_id:Int! 
      #  user_id_creator:Int @eq
      #  user_id_manager:Int @eq
      #  user_id_financial:Int @eq
      #  user_id_student_status:Int @eq
      #  manager_status:String @like(template: "%{}%")      
      #  financial_status:String @like(template: "%{}%")      
      #  student_status:String @like(template: "%{}%")      
      #  orderBy:[OrderByClause!] @orderBy
    ): [CourseStudentWithAbsencePresence] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\CourseStudent\\GetCourseStudentsWithAbsencePresence@resolveCourseStudent") 
    
    show_all_illegal_student(id:ID):[CourseStudentWithIllegalStudent] @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\CourseStudent\\GetCourseStudentsWithIllegalStudent@resolveCourseStudent") 

    getAbsencePresence(id:ID!):AbsencePresence @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\AbsencePresence\\GetAbsencePresence@resolveAbsencePresenceAttribute") 
    getAbsencePresences(
         status:String @like(template: "%{}%")
         user_id_creator:Int
         course_session_id:Int
         course_session_date:Date
         teacher_id:Int
         student_id:Int @eq
         

         orderBy:[OrderByClause!] @orderBy
    ): [AbsencePresence] 
    @guard(with:["api"])
   
    @paginate(builder: "App\\GraphQL\\Queries\\AbsencePresence\\GetAbsencePresences@resolveAbsencePresence") 
    

    getAzmoon(id:ID!):Azmoon @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\Azmoon\\GetAzmoon@resolveAzmoonAttribute") 
    getAzmoons(
       isSMSsend:Boolean @eq 
       score_gt:Float @where(operator: ">=", key: "score")     
       score_lt:Float @where(operator: "<=", key: "score")     
       orderBy:[OrderByClause!] @orderBy
    ): [Azmoon] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\Azmoon\\GetAzmoons@resolveAzmoon") 
    

    getAzmoonResult(id:ID!):AzmoonResult @guard(with:["api"]) @can(ability: "view")  @field(resolver: "App\\GraphQL\\Queries\\AzmoonResult\\GetAzmoonResult@resolveAzmoonResultAttribute") 
    getAzmoonResults(
         result_score_gt:Float @where(operator: ">=" , key: "result_score")         
         result_score_lt:Float @where(operator: "<=" , key: "result_score")         
         orderBy:[OrderByClause!] @orderBy
    ): [AzmoonResult] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\AzmoonResult\\GetAzmoonResults@resolveAzmoonResult") 
    
    
    getFault(id:ID!):Fault  @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\Fault\\GetFault@resolveFaultAttribute") 
    getFaults(
       description:String @like(template: "%{}%")
       orderBy:[OrderByClause!] @orderBy
    ): [Fault] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\Fault\\GetFaults@resolveFault") 
    

    getBranch(id:ID!):Branch @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\Branch\\GetBranch@resolveBranchAttribute") 
    getBranches(
       name:String @like(template: "%{}%")
       orderBy:[OrderByClause!] @orderBy
    ): [Branch]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Branch\\GetBranches@resolveBranchesAttribute") 
    

    getBranchClassRoom(id:ID!):BranchClassRoom  @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\BranchClassRoom\\GetBranchClassRoom@resolveBranchClassRoomAttribute") 
    getBranchClassRooms(
       branch_id:Int
       name:String @like(template: "%{}%")
       description:String @like(template: "%{}%")
       orderBy:[OrderByClause!] @orderBy
    ): [BranchClassRoom] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\BranchClassRoom\\GetBranchClassRooms@resolveBranchClassRoomsAttribute") 
    

     getStudentContact(id:ID!):StudentContact @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolveStudentContactAttribute") 
     getStudentContacts(           
       orderBy:[OrderByClause!] @orderBy
    ): [StudentContact] @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContacts@resolveStudentContact") 
    
     getStudentFault(id:ID!):StudentFault @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\StudentFault\\GetStudentFault@resolveStudentFaultAttribute") 
     getStudentFaults(           
       orderBy:[OrderByClause!] @orderBy
    ): [StudentFault]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\StudentFault\\GetStudentFaults@resolveStudentFault") 
     

     getLesson(id:ID!):Lesson @guard(with:["api"]) @can(ability: "view") @field(resolver: "App\\GraphQL\\Queries\\Lesson\\GetLesson@resolveLessonAttribute") 
     getLessons(           
       orderBy:[OrderByClause!] @orderBy
    ): [Lesson]  @guard(with:["api"]) @paginate(builder: "App\\GraphQL\\Queries\\Lesson\\GetLessons@resolveLesson") 
     

     gettest(token:String) : String @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolvetestAttribute") 
     testHeader(simpleparameter:String) : String @cacheControl(maxAge: 3600, scope: PUBLIC) @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolvetestHeaderAttribute") 
}

 enum LessonEnum{
   Mathematics @enum(value: 0)
   Physics @enum(value:1)
   Biology @enum(value: 2)
  
 }
input OrderByClause{
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}
type StudentContact @key(fields: "id") {
  id:ID!
  user_id_creator:Int
  student_id:Int
  # student:Student @provides(fields: "id")
  absence_presence_id:Int
  who_answered:String
  description:String
  is_called_successfull:Boolean
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
}

type StudentFault @key(fields: "id") {
  id:ID!
  user_id_creator:Int
  student_id:Int
  # student:Student @provides(fields: "id")
  fault_id:Int  
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
}

type Branch{
    id:ID
    user_id_creator:Int
    name:String
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    # User:[User] @belongsTo
    user: User @belongsTo
   
}
type BranchClassRoom{
    id:ID
    user_id_creator:Int
    branch_id:Int
    name:String
    description:String
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    # User:[User] @belongsTo
    user: User @belongsTo
    branch:Branch @belongsTo
   
}
type Fault{
    id:ID
    user_id_creator:Int
    description:String
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    # User:[User] @belongsTo
    user: User @belongsTo
   
}
type AzmoonResult @key(fields: "id") {
    id:ID!
    student_id:Int
    result_score:String 
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    # student:Student @provides(fields: "id") 
}

type Azmoon{
    id:ID
    user_id_creator:Int
    course_id:Int
    course_session_id:Int
    isSMSsend:Int
    score:Float
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    user:User @belongsTo
    course:Course @belongsTo
    courseSession:CourseSession @belongsTo
    
}
type Lesson{
  id:Int
  name:String
}

type AbsencePresence @key(fields: "id") {
    id:ID!
    user_id_creator:Int
    course_session_id:Int
    teacher_id:Int
    student_id:Int
    # student:Student @provides(fields: "id")
    status:String
    created_at:DateTime
    updated_at:DateTime
    deleted_at:DateTime
    user:User @belongsTo
    courseSession:CourseSession @belongsTo
    teacher:User @belongsTo
}
type CourseStudentWithIllegalStudent @key(fields: "id"){
  # id:ID
  # CS_manager_status:String
  # CS_financial_status:String
  # CS_student_status:String
  status:String
  # AB_student_id:Int

  id:Int
  student_id:Int
  financial_status:String
  session_count: Int
  name: String
  course_id: String
}
type CourseStudentWithAbsencePresence @key(fields: "id"){   
      id:ID!       
      course_id:Int 
     

      ap_id:Int  
      ap_status:String 
      ap_attendance_status:String
      ap_user_id_creator:Int
      ap_course_session_id:Int
      ap_teacher_id:Int
      ap_student_id:Int
      ap_created_at:DateTime

      cs_user_id_creator:Int
      student_id:Int
      cs_course_id:Int
      cs_manager_status:String
      cs_financial_status:String
      cs_student_status:String
      cs_user_id_manager:Int
      cs_user_id_financial:Int
      cs_user_id_student_status:Int
      cs_created_at:DateTime

      # user_creator:User @belongsTo
      # user_manager:User @belongsTo
      # user_financial:User @belongsTo
      # user_student_status:User @belongsTo
      
}
type CourseStudent @key(fields: "id"){   
        id:ID!
        course_id:Int
        # course_session_id:Int
        # absence_presence:AbsencePresence @field(resolver: "App\\GraphQL\\Queries\\AbsencePresence\\GetAbsencePresence@resolveGetAbsencePresence")
        student_id:Int
       
        user_id_creator:Int
        user_id_manager:Int  
        user_id_financial:Int  
        user_id_student_status:Int  
        manager_status:String
        financial_status:String
        student_status:String   

        created_at:DateTime
        updated_at:DateTime
        deleted_at:DateTime

        user_creator:User @belongsTo
        user_manager:User @belongsTo
        user_financial:User @belongsTo
        user_student_status:User @belongsTo
        course:Course @belongsTo

}
type CourseSession{   
        id:ID
        user_id_creator:Int
        branch_class_room_id:Int
        course_id:Int
        name:String
        price:Int
        special:Boolean
        start_date:Date
        start_time:String
        end_time:String
        user:User @belongsTo
        course: Course @belongsTo
        classRoom:BranchClassRoom @belongsTo
        absence_presence:AbsencePresence @hasMany
}

type Course{
      id:ID
      user_id_creator:Int
      branch_id:Int
      year_id:Int
      teacher_id:Int
      name:String
      lesson_id:Int
      type:String
      education_level:String
      financial_status:String
      user_id_financial:Int
      created_at:DateTime
      updated_at:DateTime
      deleted_at:DateTime
      user:User @belongsTo
      year:Year @belongsTo
      teacher:User @belongsTo
      lesson:Lesson @belongsTo
      branch:Branch @belongsTo
      courseSession:CourseSession @hasMany

}

# type Student @key(fields: "id") @extends  {
#   id:ID! @external 
#   courses: [CourseStudent]      
# }

  type User {
    id:ID    
    # userId:ID
    group_id:Int
    first_name: String
    last_name: String 
    #mobile: String!
    email: String! 
    #type: String!
    #is_teacher: Int! 
   
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    group: Group @belongsTo
    # faults:[Fault] @belongsToMany
    faults: [Fault] @hasMany
   
}

type Group{ 
  id:ID
  # groupId:ID
  user_id_creator:Int
  # key:String
  name:String
  persian_name:String
  type:String
  created_at: DateTime
  updated_at: DateTime
  deleted_at: DateTime
  users: [User] @hasMany
  # pivot: GroupUserPivot

  menus: [Menu!] @belongsTo
}
# type GroupUserPivot { 
#     id:ID   
#     # groupUserId: ID
#     user_id_creator:Int
#     user_id: Int
#     group_id: Int
#     key: String
#     created_at: DateTime
#     updated_at: DateTime
#     deleted_at: DateTime

#     user: [User!] @hasMany
#     group: [Group!] @hasMany
# }

type Menu {
    id:ID
    # menuId: Int
    slug: String
    name: String
    icon: String
    href: String
    #type: String!
    parent_id: Int    
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    groups: [Group!] @belongsToMany
    pivot: MenuPivot
}

type MenuPivot {
    id:ID
    # groupMenuId: Int
    user_id_creator:Int
    menu_id: Int
    group_id: Int  
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    menu: [Menu!] @hasMany
    group: [Group!] @hasMany
}


type Teacher {
  id:ID!
  user_id_creator:Int
  first_name:String
  last_name:String
  mobile:String
  address:String
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
}

type Year {
  id:ID!
  user_id_creator:Int  
  name:String
  active:Boolean  
  created_at:DateTime
  updated_at:DateTime
  deleted_at:DateTime
  user: User! @belongsTo
}


  
  input CreateAzmoonInput{
          user_id:Int!
          course_id:Int!
          course_session_id:Int!
          isSMSsend:Int!
          score:Float!
   }
   input CreateUserInput {
     # type: String!
     # mobile: String!  @rules(apply:["size:11","unique:users,mobile"])
     # email: String! @rules(apply: ["email","unique:users,email"])
      email: String! @rules(apply: ["size:11","unique:users,email"])
      password: String! @hash @rules(apply: ["min:6"])
      first_name: String!
      last_name: String!
      group_id:Int!
      # group_user:createGroupUserInput! @create
     # is_teacher: Int!  
    }
   input UpdateUserInput {
       id:ID!
     # type: String
     # mobile: String 
      email:String  
     # password: String!      
      first_name: String
      last_name: String
      group_id:Int 
      # ): User! @update
   }
    # input createGroupUserInput {
    #   user_id_creator:Int!
    #   user_id:Int!
    #   group_id:Int!
    #   # created_at:DateTime
    #   # updated_at:datetime
    # }

    input CreateTeacherInput{
      first_name: String!
      last_name: String!
      mobile: String! @rules(apply: ["size:11","unique:teachers,mobile"])
      address:String!
    }
    input UpdateTeacherInput{
      id:ID!
      first_name: String
      last_name: String
      mobile: String @rules(apply: ["size:11","unique:teachers,mobile"])
      address:String
    }

    input CreateYearInput{
      name: String!
      active: Boolean!      
    }
    input UpdateYearInput{
      id:ID!
      name: String
      active: Boolean   
    }
    
    input CreateStudentInput{
      # first_name: String!
      # last_name: String!
      # mobile: String! @rules(apply: ["size:11","unique:teachers,mobile"])
      # address:String!

       
        phone:String! # @rules(apply: ["size:11","unique:students,phone"]),
        first_name:String!
        last_name:String!
        level:String
        egucation_level:String!
        parents_job_title:String
        home_phone:String
        father_phone:String
        mother_phone:String
        # school:String
        # average:Float
        major:String
        description:String
        # introducing:String
        # student_phone:String
        # cities_id:Int
        # sources_id:Int
        # supporters_id:Int
        # archived:Int
    }
     input UpdateStudentInput{
        id:Int!
        phone:String! # @rules(apply: ["size:11","unique:students,phone"]),
        first_name:String! 
        last_name:String! 
        level:String
        egucation_level:String! 
        parents_job_title:String
        home_phone:String
        father_phone:String 
        mother_phone:String       
        major:String 
        description:String 

        # phone:String,# @rules(apply: ["size:11","unique:students,phone"]),
        # first_name:String,
        # last_name:String,
        # level:Int,
        # egucation_level:String,
        # parents_job_title:String,
        # home_phone:String,
        # father_phone:String,
        # mother_phone:String,
        # school:String,
        # average:Float,
        # major:String!,
        # introducing:String,
        # student_phone:String,
        # cities_id:Int,
        # sources_id:Int,
        # supporters_id:Int,
        # archived:Int
    }
    input CreateCourseInput{       
      branch_id:Int!
      year_id:Int!
      teacher_id:Int!
      name:String!
      lesson_id:Int!
      education_level:String!
      type:String!
      financial_status:String
      user_id_financial:Int
            
    }
    # input CreateCourseWithDateInput{       
      
    #   year_id:Int!
    #   teacher_id:Int!
    #   name:String!
    #   lesson:String!
    #   education_level:String!
    #   type:String!
    #   financial_status:String
    #   user_id_financial:Int
            
    # }
    
     input UpdateCourseInput{       
      id:ID!
      branch_id:Int
      year_id:Int
      teacher_id:Int
      name:String
      lesson_id:Int
      education_level:String      
      type:String
      financial_status:String
      user_id_financial:Int
      
    }
    input CreateCourseSessionInput @validator{       
      
        course_id:Int!
        branch_class_room_id:Int!
        name:String
        price:Int
        special:Boolean
        start_date:String!
        start_time:String!
        end_time:String!
            
    }
      input CreateCourseSessionByDuringDateInput @Validator{       
      
        course_id:Int!
        branch_class_room_id:Int!
        days:[String]
        name:String
        price:Int
        special:Boolean
        start_date:String!
        end_date:String!
        start_time:String!
        end_time:String!      
            
    }
    input UpdateCourseSessionInput{       
        id:ID!
        course_id:Int,
        branch_class_room_id:Int,
        name:String,
        price:Int
        special:Boolean
        start_date:Date,
        start_time:String,
        end_time:String,
            
    }

    input CreateCourseStudentInput{ 
        
        course_id:Int!
        # course_session_id:Int!
        student_id:Int!
        manager_status:String
        financial_status:String
        student_status:String
        user_id_manager:Int
        user_id_financial:Int
        user_id_student_status:Int
        
    }
    input UpdateCourseStudentInput{       
        id:ID!
        course_id:Int
        # course_session_id:Int
        student_id:Int
        manager_status:String
        financial_status:String
        student_status:String
        user_id_manager:Int
        user_id_financial:Int
        user_id_student_status:Int
            
    }


    input CreateAbsencePresenceInput{       
       
        course_session_id:Int,
        teacher_id:Int,
        status:String,
        created_at:DateTime
        updated_at:DateTime
        deleted_at:DateTime
            
    }
    input UpdateAbsencePresenceInput{

        id:ID!        
        course_session_id:Int,
        teacher_id:Int,
        status:String,
        created_at:DateTime
        updated_at:DateTime
        deleted_at:DateTime
    }

    input CreateAzmoonInput{ 
          course_id:Int
          course_session_id:Int
          isSMSsend:Int
          score:Float
    }
    input UpdateAzmoonInput{
          id:ID!          
          course_id:Int
          course_session_id:Int
          isSMSsend:Int
          score:Float
    }

    input CreateAzmoonResultInput{ 
         
          student_id:Int,
          result_score:String, 
    }
    input UpdateAzmoonResultInput{
        id:ID
        student_id:Int,
        result_score:String, 
    }

    input CreateFaultInput{         
          description:String!         
    }
    input UpdateFaultInput{
        id:Int
        description:String
    }    

    input CreateBranchInput{         
          name:String!         
    }
    input UpdateBranchInput{
        id:Int
        name:String
    }
    input CreateBranchClassRoomInput{ 
          branch_id:Int
          description:String        
          name:String         
    }
    input UpdateBranchClassRoomInput{
        id:Int
        branch_id:Int
        description:String        
        name:String
    }

     input CreateLessonInput{ 
              
          name:String         
    }
    input UpdateLessonInput{
        id:Int
           
        name:String
    }
     

type Mutation {
    #test2:String!
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    # logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    # forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    # updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    # register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    # socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    # verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    #updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse @field(resolver: "App\\GraphQL\\Mutations\\User\\ResetPassword@resolve") 
    updateOtherUserPassword(input: UpdateOtherUserPassword! @spread): String @field(resolver: "App\\GraphQL\\Mutations\\User\\ResetOtherUserPassword@resolve") 
  # region user
  #  createUser(input: CreateUserInput! @spread): User! @create  
    createUser(input: CreateUserInput! @spread): User! @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\User\\CreateUser@resolve")
    updateUser(input: UpdateUserInput! @spread): User! @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\User\\UpdateUser@resolve")
    deleteUser(id:ID!): User @guard(with:["api"]) @can(ability: "delete") @field(resolver: "App\\GraphQL\\Mutations\\User\\DeleteUser@resolve")

  #end 

  # region teacher
    createTeacher(input: CreateTeacherInput! @spread): Teacher! @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\CreateTeacher@resolver")
    updateTeacher(input: UpdateTeacherInput! @spread): Teacher! @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\UpdateTeacher@resolver")
    deleteTeacher(id:ID!):Teacher @guard(with:["api"]) @delete
  #end region

   # region yaer
    createYear(input: CreateYearInput! @spread): Year! @can(ability: "create") @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Year\\CreateYear@resolver")
    updateYear(input: UpdateYearInput! @spread): Year! @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Year\\UpdateYear@resolver")
    deleteYear(id:ID!):Year @guard(with:["api"]) @delete @can(ability: "delete")
  #end yaer

   # region Course
    createCourse(input: CreateCourseInput! @spread): Course! @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Course\\CreateCourse@resolver")
    # createCourseWithDate(input: CreateCourseWithDateInput! @spread): Course!  @field(resolver: "App\\GraphQL\\Mutations\\Course\\CreateCourse@resolverWithDate")
    updateCourse(input: UpdateCourseInput! @spread): Course!  @can(ability: "update") @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Course\\UpdateCourse@resolver")
    deleteCourse(id:ID!):Course  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Course\\DeleteCourse@resolver")
   #end Course

    # region Course_Session
    createCourseSession(input: CreateCourseSessionInput! @spread): CourseSession!  @can(ability: "create") @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\CourseSession\\CreateCourseSession@resolver")
    createCourseSessionByDuringDate(input: CreateCourseSessionByDuringDateInput!  @can(ability: "create") @guard(with:["api"]) @spread): [CourseSession]!  @field(resolver: "App\\GraphQL\\Mutations\\CourseSession\\CreateCourseSession@resolverByDuringDate")
    updateCourseSession(input: UpdateCourseSessionInput! @spread): CourseSession!  @can(ability: "update") @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\CourseSession\\UpdateCourseSession@resolver")
    deleteCourseSession(id:ID!):CourseSession  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\CourseSession\\DeleteCourseSession@resolver")
    #end Course_session

    #region Course_Student
    createCourseStudent(input: CreateCourseStudentInput! @spread): CourseStudent!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\CourseStudent\\CreateCourseStudent@resolver")
    updateCourseStudent(input: UpdateCourseStudentInput! @spread): CourseStudent!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\CourseStudent\\UpdateCourseStudent@resolver")
    deleteCourseStudent(id:ID!):CourseStudent  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\CourseStudent\\DeleteCourseStudent@resolver")
    #end Course_Student

    #region AbsencePresence
      createAbsencePresence(input: CreateAbsencePresenceInput! @spread): AbsencePresence!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AbsencePresence\\CreateAbsencePresence@resolver")
      updateAbsencePresence(input: UpdateAbsencePresenceInput! @spread): AbsencePresence!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AbsencePresence\\UpdateAbsencePresence@resolver")
      deleteAbsencePresence(id:ID!):AbsencePresence  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AbsencePresence\\DeleteAbsencePresence@resolver")
    #end AbsencePresence

    #region Azmoon
      createAzmoon(input: CreateAzmoonInput! @spread): Azmoon!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Azmoon\\CreateAzmoon@resolver")
      updateAzmoon(input: UpdateAzmoonInput! @spread): Azmoon!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Azmoon\\UpdateAzmoon@resolver")
      deleteAzmoon(id:ID!):Azmoon @guard(with:["api"])  @can(ability: "delete") @field(resolver: "App\\GraphQL\\Mutations\\Azmoon\\DeleteAzmoon@resolver")
    #end Azmoon

    #region AzmoonResult
      createAzmoonResult(input: CreateAzmoonResultInput! @spread): AzmoonResult!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AzmoonResult\\CreateAzmoonResult@resolver")
      updateAzmoonResult(input: UpdateAzmoonResultInput! @spread): AzmoonResult!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AzmoonResult\\UpdateAzmoonResult@resolver")
      deleteAzmoonResult(id:ID!):AzmoonResult  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AzmoonResult\\DeleteAzmoonResult@resolver")
    #end AzmoonResult

    #region AzmoonResult
      createFault(input: CreateFaultInput! @spread): Fault!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Fault\\CreateFault@resolver")
      updateFault(input: UpdateFaultInput! @spread): Fault!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Fault\\UpdateFault@resolver")
      deleteFault(id:ID!):Fault  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Fault\\DeleteFault@resolver")
    #end AzmoonResult

    #region Branch
      createBranch(input: CreateBranchInput! @spread): Branch!  @can(ability: "create") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Branch\\CreateBranch@resolver")
      updateBranch(input: UpdateBranchInput! @spread): Branch!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Branch\\UpdateBranch@resolver")
      deleteBranch(id:ID!):Branch  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Branch\\DeleteBranch@resolver")
    #end Branch
    #region BranchClassRoom
      createBranchClassRoom(input: CreateBranchClassRoomInput! @spread): BranchClassRoom!  @can(ability: "create") @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\BranchClassRoom\\CreateBranchClassRoom@resolver")
      updateBranchClassRoom(input: UpdateBranchClassRoomInput! @spread): BranchClassRoom!  @can(ability: "update") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\BranchClassRoom\\UpdateBranchClassRoom@resolver")
      deleteBranchClassRoom(id:ID!):BranchClassRoom  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\BranchClassRoom\\DeleteBranchClassRoom@resolver")
    #end BranchClassRoom
     #region Lesson
      createLesson(input: CreateLessonInput! @spread): Lesson! @guard(with:["api"])  @can(ability: "create") @field(resolver: "App\\GraphQL\\Mutations\\Lesson\\CreateLesson@resolver")
      updateLesson(input: UpdateLessonInput! @spread): Lesson! @guard(with:["api"])  @can(ability: "update") @field(resolver: "App\\GraphQL\\Mutations\\Lesson\\UpdateLesson@resolver")
      deleteLesson(id:ID!):Lesson  @can(ability: "delete") @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Mutations\\Lesson\\DeleteLesson@resolver")
    #end Lesson
}

